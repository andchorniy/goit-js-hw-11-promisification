{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,WACPD,EAAQF,KACRA,OAINI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCXXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAInBC,EAAkB,SAACC,EAAUC,GAC/B,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACtCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAE7D,OAAOhB,QAAQC,QAAQa,IAGrBX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAG7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCnBnC,IAmBMe,EAAkB,SAAAC,GACtB,IApBiCC,EAAKC,EAoBhCvB,GApB2BsB,EAoBO,IApBFC,EAoBO,IAnBtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAoBlD,OAAO,IAAIpB,SAAQ,SAACC,EAASwB,GACzBvB,YAAW,WACYoB,KAAKE,SAAW,GAG/BvB,EAAQ,CAACkB,EAAYO,GAAI5B,IAGrB2B,EAAON,EAAYO,MAExB5B,OAKT6B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAVtB,EAAU,KACjCC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAGFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,K","file":"main.d8c54c7bf36902732f29.js","sourcesContent":["const delay = ms => {\r\n    return new Promise(resolve => { \r\n        setTimeout(() => {\r\n            resolve(ms)\r\n         }, ms)\r\n    })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n\r\nconst toggleUserState = (allUsers, userName) => { \r\n    const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    return Promise.resolve(updatedUsers)\r\n}\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//         onSuccess(transaction.id, delay);\r\n        \r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n            if (canProcess) {\r\n                resolve([transaction.id, delay])\r\n                    \r\n                } else {\r\n                    reject(transaction.id);\r\n                }\r\n            }, delay);})\r\n  \r\n};\r\n// Пришлость изменить параметры функции logSuccess так как не придумал другого способа\r\n// Если есть другой вариант прошу подсказать)\r\nconst logSuccess = ([id, time]) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}